<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2014, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- ########################################################### -->
	<!-- Embedded A-MQ instance -->
	<!-- ########################################################### -->
	<bean class="org.apache.activemq.broker.BrokerService"
		destroy-method="stop" id="broker-svc" init-method="start">
		<property name="transportConnectorURIs">
			<list>
				<value>tcp://0.0.0.0:61670</value>
			</list>
		</property>
		<property name="persistent" value="false" />
		<property name="useJmx" value="true" />
		<property name="brokerId" value="eventbrk" />
		<property name="brokerName" value="eventbrk" />
	</bean>
	<bean class="org.apache.activemq.ActiveMQConnectionFactory" id="jmsConnectionFactory">
		<property name="brokerURL" value="failover:(tcp://localhost:61670)" />
		<property name="userName" value="admin" />
		<property name="password" value="admin" />
	</bean>
	<bean class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop" id="pooledConnectionFactory" init-method="start"
		primary="true">
		<property name="maxConnections" value="4" />
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>
	<bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfig">
		<property name="connectionFactory" ref="pooledConnectionFactory" />
		<property name="concurrentConsumers" value="4" />
	</bean>
	<bean class="org.apache.activemq.camel.component.ActiveMQComponent"
		id="activemq">
		<property name="configuration" ref="jmsConfig" />
	</bean>

	<!-- ########################################################### -->
	<!-- Embedded Database -->
	<!-- ########################################################### -->
	<bean class="org.h2.tools.Server" destroy-method="stop"
		factory-method="createTcpServer" id="h2db" init-method="start">
		<constructor-arg
			value="-tcp,-tcpAllowOthers,-tcpPort,8643,-baseDir,./target/h2dbstore" />
	</bean>

	<bean class="org.h2.tools.Server" depends-on="h2db"
		destroy-method="stop" factory-method="createWebServer" id="h2Server"
		init-method="start" lazy-init="false">
		<constructor-arg
			value="-web,-webAllowOthers,-webPort,11111,-baseDir,./target/h2dbstore" />
	</bean>


	<!-- ########################################################### -->
	<!-- Database configs -->
	<!-- ########################################################### -->
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSource">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:tcp://localhost:8643/db" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>
	<bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean class="helpers.MonitoringEventFactory" id="monitoringEventFactory" />

	<camelContext id="extraction-process" xmlns="http://camel.apache.org/schema/spring">

		<onException>
			<exception>java.lang.Exception</exception>

			<handled>
				<constant>true</constant>
			</handled>

			<wireTap uri="activemq:queue:events">
				<body>
					<method ref="monitoringEventFactory"
						method="generateEvent(${headers.breadcrumbId},'started',${exception.message})" />
				</body>
			</wireTap>

			<transform>
				<constant>ERROR</constant>
			</transform>

		</onException>

		<route id="httpInsert">
			<!-- Expects in headers as http query parameters name, description, age -->
			<!-- Example call : http://localhost:8123/insert?name=toto&description=test&age=10 -->

			<from uri="netty4-http:http://0.0.0.0:8123/insert" />
			<to uri="sql:classpath:sql/insertObject.sql" />
			<setBody>
				<constant>OK</constant>
			</setBody>
		</route>

		<route id="httpPopulate">
			<!-- Expects in headers as http query parameters name, description, age 
				and n -->
			<!-- Example call : http://localhost:8123/populate?name=toto&description=test&age=10&n=1000 -->
			<from uri="netty4-http:http://0.0.0.0:8123/populate" />
			<loop>
				<header>n</header>
				<to uri="sql:classpath:sql/insertObject.sql" />
			</loop>
			<setBody>
				<constant>OK</constant>
			</setBody>
		</route>


		<route id="test">
			<from uri="netty4-http:http://0.0.0.0:8123/test" />
			<setHeader headerName="flowInstanceID">
				<simple></simple>
			</setHeader>
			<unmarshal>
				<json library="Jackson" />
			</unmarshal>

			<wireTap uri="activemq:queue:events">
				<body>
					<method ref="monitoringEventFactory"
						method="generateEvent(${headers.breadcrumbId},'started',${body})" />
				</body>
			</wireTap>

			<log message="jackson msg : ${body[id]}" />

			<setBody>
				<constant>OK</constant>
			</setBody>

			<wireTap uri="activemq:queue:events">
				<body>
					<method ref="monitoringEventFactory"
						method="generateEvent(${headers.breadcrumbId},'ended',null)" />
				</body>
			</wireTap>

		</route>

		<!-- ######################## -->
		<!-- Extraction using streams -->
		<!-- ######################## -->
		<route id="amqExtract">
			<from uri="activemq:queue:extract" id="extractAmqStarter" />
			<to uri="direct:extract" />
		</route>

		<route id="httpExtract">
			<from uri="netty4-http:http://0.0.0.0:8123/extract" />
			<to uri="direct:extract" />
			<setBody>
				<constant>OK</constant>
			</setBody>
		</route>

		<!-- Using streams to avoid running into memory issues -->
		<route id="extract">
			<from uri="direct:extract" id="extractStarter" />

			<unmarshal>
				<json library="Jackson" />
			</unmarshal>

			<wireTap uri="activemq:queue:events">
				<body>
					<method ref="monitoringEventFactory"
						method="generateEvent(${headers.breadcrumbId},'started',${body})" />
				</body>
			</wireTap>

			<setHeader headerName="CamelJdbcParameters">
				<simple>${body}</simple>
			</setHeader>

			<setBody>
				<constant><![CDATA[select * from Person where occupation = :?occupation]]></constant>
			</setBody>
			<to
				uri="jdbc:dataSource?outputType=StreamList&amp;useHeadersAsParameters=true" />
			<split streaming="true">
				<simple>${body}</simple>
				<log message="${body.get('UID')}"></log>
				<marshal>
					<json library="Jackson" />
				</marshal>
				<setBody>
					<simple>${body}\n</simple>
				</setBody>
				<to uri="file:./target?fileExist=Append&amp;fileName=extract.txt"></to>
			</split>
			<log message="extracting ended" />
			<wireTap uri="activemq:queue:events">
				<body>
					<method ref="monitoringEventFactory"
						method="generateEvent(${headers.breadcrumbId},'ended',null)" />
				</body>
			</wireTap>
		</route>


		<!-- ######################## -->
		<!-- Extraction using no streams -->
		<!-- ######################## -->
		<!-- Show that we rapidly run into memory issues in this case -->

		<route id="httpExtractNoStream">
			<from uri="netty4-http:http://0.0.0.0:8123/extractNoStream" />
			<to uri="direct:extractNoStream" />
			<setBody>
				<constant>OK</constant>
			</setBody>
		</route>

		<route id="extractNoStream">
			<from uri="direct:extractNoStream" id="extractNoStreamStarter" />
			<log message="extracting without stream started" />
			<setBody>
				<constant>select * from Person</constant>
			</setBody>
			<to uri="jdbc:dataSource" />
			<split>
				<simple>${body}</simple>
				<log message="${body.get('UID')}"></log>
			</split>
			<log message="extracting ended" />
		</route>


		<!-- ######################## -->
		<!-- Collects events and logs them into a file -->
		<!-- ######################## -->
		<route id="eventCollector">
			<from uri="activemq:queue:events"></from>
			<log message="${headers}" />
			<setBody>
				<simple>${body}\n</simple>
			</setBody>
			<to uri="file:./target?fileExist=Append&amp;fileName=events.txt"></to>
		</route>


		<!-- ######################## -->
		<!-- Init Database -->
		<!-- ######################## -->
		<route id="initDBRoute" startupOrder="1">
			<from id="initDBStarter" uri="timer:initDB?repeatCount=1&amp;delay=-1" />
			<to uri="sql:classpath:sql/businessObjectCreate.sql" />
			<log message="DB initialized!" />
		</route>


	</camelContext>
</beans>
